* Start the Sever Mode

#+BEGIN_SRC emacs-lisp
  (server-mode 1)
#+end_src

* Display Startup Time

#+begin_src emacs-lisp

  (defun display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collection."
          (format "%.2f seconds" (float-time
                                     (time-subtract after-init-time before-init-time)))
          gcs-done))
  (add-hook 'emacs-startup-hook #'display-startup-time)

#+end_src

* Native compilation cache

In Emacs 29, the location of the native compilation cache can be changed.

#+begin_src emacs-lisp

;;  (when (fboundp 'startup-redirect-eln-cache)
;;  (startup-redirect-eln-cache
;;   (convert-standard-filename
;;    (expand-file-name  "etc/eln-cache/" user-emacs-directory))))

#+end_src

* Enable Debugging

#+begin_src emacs-lisp

  ;; (setq debug-on-error t
  ;;       debug-on-signal nil
  ;;       debug-on-quit nil)

#+end_src

* Bootstrap Packages Archive's

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (package-initialize)

#+end_src

* Package Manager 

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  ;; ensure that packages are installed
  (require 'use-package-ensure)
  ;; OR
  ;; (require 'use-package)
  ;;(setq use-package-always-ensure t)

#+end_src

** Update Packages

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    ;; (auto-jpackage-update-at-time "11:00")
    )

#+end_src

* Startup Performance

  This section is where it make emacs faster to load.

** Garbage collection

Makes startup faster by reducing the frequency of garbage collection
+ ivy-posframe-display-at-frame-top-center

=Note=: If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+begin_src emacs-lisp

  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :init
    (setq ivy-posframe-display-functions-alist
          '((swiper                     . ivy-posframe-display-at-point)
            (complete-symbol            . ivy-posframe-display-at-point)
            (counsel-M-x                . ivy-display-function-fallback)
            (counsel-esh-history        . ivy-posframe-display-at-window-center)
            (counsel-describe-function  . ivy-display-function-fallback)
            (counsel-describe-variable  . ivy-display-function-fallback)
            (counsel-find-file          . ivy-display-function-fallback)
            (counsel-recentf            . ivy-display-function-fallback)
            (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
            (dmenu                      . ivy-posframe-display-at-frame-top-center)
            (nil                        . ivy-posframe-display))
          ivy-posframe-height-alist
          '((swiper . 20)
            (dmenu . 20)
            (t . 10)))
    :config
    (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Kitchen

#+begin_src emacs-lisp

  (use-package no-littering
    :init
    (setq no-littering-etc-directory (expand-file-name "etc/config" user-emacs-directory))
    (setq no-littering-var-directory (expand-file-name "etc/data" user-emacs-directory))
    :config
    (no-littering-theme-backups)
    ;; ignore recent files from the no-littering directories
    (require 'recentf)
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory)))

  ;; (defun meliache-file-is-root-p (name)
  ;;   "Check whether tramp su/sudo method is used for opening filepath NAME."
  ;;   ;; Adopted from https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-File-Lock-and-Backup.html
  ;;   (let ((method (file-remote-p name 'method)))
  ;;     (when (stringp method)
  ;; 	(member method '("su" "sudo")))))
  ;; (defun meliache-file-is-not-root-p (name)
  ;;   (not (meliache-file-is-root-p name)))
  ;; (defun my-backup-enable-predicate (name)
  ;;   (and (normal-backup-enable-predicate name)
  ;; 	 ;; don't save password files
  ;; 	 (not (s-starts-with? "/dev/shm" name))
  ;; 	 (not (s-contains? "password-store" name))
  ;; 	 (meliache-file-is-not-root-p name)))
  ;; (setq backup-enable-predicate #'my-backup-enable-predicate)



  ;; ;; disable auto-save on certain tramp profiles
  ;; (connection-local-set-profile-variables
  ;;  'no-remote-auto-save-profile
  ;;  '((buffer-auto-save-file-name . nil)
  ;;    (remote-file-name-inhibit-auto-save-visited . t)
  ;;    (remote-file-name-inhibit-auto-save . t)))

  ;; ;; disable auto-save for specific protocols
  ;; (dolist (protocol '("sudo" "doas" "su" "sudoedit" "ssh"))
  ;;   (connection-local-set-profiles
  ;;    `(:application tramp :protocol ,protocol 'no-remote-auto-sav

#+end_src
